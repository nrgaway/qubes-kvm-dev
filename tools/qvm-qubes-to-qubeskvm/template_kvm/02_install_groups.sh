#!/bin/bash -e
# vim: set ts=4 sw=4 sts=4 et :

source "${SCRIPTSDIR}/distribution.sh"


#### '----------------------------------------------------------------------
info ' Trap ERR and EXIT signals and cleanup (umount)'
#### '----------------------------------------------------------------------
trap cleanup ERR
trap cleanup EXIT

#### '----------------------------------------------------------------------
##info ' Distribution specific steps (install systemd, add sources, etc)'
#### '----------------------------------------------------------------------
##buildStep "$0" "${DIST}"

#### '----------------------------------------------------------------------
##info " Installing extra packages in script_${DIST}/packages.list file"
#### '----------------------------------------------------------------------
##export YUM0=${PWD}/pkgs-for-template
##chroot_cmd ${YUM} clean all
##installPackages
##yumUpdate


#### '----------------------------------------------------------------------
info " Cloning private partition"
#### '----------------------------------------------------------------------
target_private="${INSTALLDIR}/rw"
target_private_home="${INSTALLDIR}/rw/home"
source_private="${SOURCEDIR}/private"

mkdir -p "${INSTALLDIR}/rw"
mount --bind "${PRIVATEDIR}" "${INSTALLDIR}/rw"

if [ -d "${source_private}" ]; then
    rsync -aP --delete "${source_private}/" "${target_private}" || true
else
    if mountpoint -q ${target_private} ; then

        if ! [ -d ${target_private}/config ] ; then
            echo "Virgin boot of the VM: populating ${target_private}/config" >&2

            mkdir -p ${target_private}/config
            touch ${target_private}/config/rc.local
            cat > ${target_private}/config/rc.local <<EOF
#!/bin/sh

# This script will be executed at every VM startup, you can place your own
# custom commands here. This includes overriding some configuration in /etc,
# starting services etc.

# Example for overriding the whole CUPS configuration:
#  rm -rf /etc/cups
#  ln -s ${target_private}/config/cups /etc/cups
#  systemctl --no-block restart cups
EOF
            chmod 755 ${target_private}/config/rc.local

            touch ${target_private}/config/qubes-firewall-user-script
            cat > ${target_private}/config/qubes-firewall-user-script <<EOF
#!/bin/sh

# This script is called in AppVMs after every firewall update (configuration
# change, starting some VM etc). This is a good place to write own custom
# firewall rules, in addition to autogenerated ones. Remember that in most cases
# you'll need to insert the rules at the beginning (iptables -I) for it to be
# effective.
EOF
            chmod 755 ${target_private}/config/qubes-firewall-user-script

            touch ${target_private}/config/suspend-module-blacklist
            cat > ${target_private}/config/suspend-module-blacklist <<EOF
# You can list modules here that you want to be unloaded before going to sleep. This
# file is used only if the VM has any PCI device assigned. Modules will be
# automatically re-loaded after resume.
EOF
        fi

        if ! [ -d ${target_private}/usrlocal ] ; then
            if [ -d /usr/local.orig ] ; then
                echo "Virgin boot of the VM: populating ${target_private}/usrlocal from /usr/local.orig" >&2
                cp -af /usr/local.orig ${target_private}/usrlocal
            else
                echo "Virgin boot of the VM: creating ${target_private}/usrlocal" >&2
                mkdir -p ${target_private}/usrlocal
            fi
        fi

        echo "Finished checking ${target_private}" >&2
    fi

    # Old Qubes versions had symlink /home -> ${target_private}/home; now we use mount --bind
    if [ -L ${INSTALLDIR}/home ]; then
        rm ${INSTALLDIR}/home
        mkdir ${INSTALLDIR}/home
    fi

    ##if [ ! -e ${INSTALLDIR}/var/lib/qubes/first-boot-completed ]; then
    ##    touch ${INSTALLDIR}/var/lib/qubes/first-boot-completed
    ##fi

    # Change source_private location
    source_private="${SOURCEDIR}/root/home"
    mkdir -p "${target_private_home}"
    rsync -aP --delete "${source_private}/" "${target_private_home}" || true
fi
sync
#sleep 1
umount "${INSTALLDIR}/rw"


#### '----------------------------------------------------------------------
info " Cloning root partition"
#### '----------------------------------------------------------------------
if [ -d "${SOURCEDIR}/root" ]; then
    rsync -aP --delete "${SOURCEDIR}/root/" "${INSTALLDIR}" || true
    mkdir -p "${INSTALLDIR}/rw"
fi


#### '----------------------------------------------------------------------
info " Remount private partition"
#### '----------------------------------------------------------------------
mkdir -p "${INSTALLDIR}/home/"
rm -rf "${INSTALLDIR}/home/"*
mount --bind "${PRIVATEDIR}" "${INSTALLDIR}/rw"
mount --bind "${INSTALLDIR}/rw/home" "${INSTALLDIR}/home"


#### '----------------------------------------------------------------------
info " Cloning boot partition"
#### '----------------------------------------------------------------------
target_boot="${INSTALLDIR}/boot"
source_boot="${SOURCEDIR}/boot"
if [ ! -d "${source_boot}" ]; then
    source_boot="${SOURCEDIR}/root/boot"
fi
rsync -aP --delete "${source_boot}/" "${target_boot}" || true

######## MOVED TO 'install-qubes-kvm-updates.sh'
###### '----------------------------------------------------------------------
##info " Cloning EFI partition"
###### '----------------------------------------------------------------------
##target_efi="${INSTALLDIR}/boot/efi"
##source_efi="${SOURCEDIR}/efi"
##if [ ! -d "${source_efi}" ]; then
##    source_efi="${ROOTDIR}/data/efi"
##fi
##rsync -aP --delete "${source_efi}/" "${target_efi}" || true
####unmount "${target_efi}" || true


#### '----------------------------------------------------------------------
info " Cloning rw/usrlocal"
#### '----------------------------------------------------------------------
target_usrlocal="${PRIVATEDIR}/usrlocal"
mkdir -p "${target_usrlocal}"
readarray -t usrlocal_contents < <(ls -1 "${target_usrlocal}")

# Only update '/rw/usrlocal' if it is empty
if [ "${#usrlocal_contents[@]}" -eq 0 ]; then
    rsync -aP --delete "${INSTALLDIR}/usr/local/" "${target_usrlocal}" || true
    rm -rf "${INSTALLDIR}/usr/local/*" || true
fi
mount --bind "${INSTALLDIR}/rw/usrlocal" "${INSTALLDIR}/usr/local"


######## MOVED TO 'install-qubes-kvm-updates.sh'
#### '----------------------------------------------------------------------
##info " Update config"
#### '----------------------------------------------------------------------
##mv "${INSTALLDIR}/etc/fstab" "${INSTALLDIR}/etc/fstab.orig"
##cp "${ROOTDIR}/data/fstab" "${INSTALLDIR}/etc/fstab"
##chown root:root "${INSTALLDIR}/etc/fstab"
##chmod 644 "${INSTALLDIR}/etc/fstab"


######## MOVED TO 'install-qubes-kvm-updates.sh'
#### '----------------------------------------------------------------------
##info " Update grub"
#### '----------------------------------------------------------------------
##mount -t proc proc "${INSTALLDIR}/proc"
##chroot "${INSTALLDIR}" mount -t sysfs sys /sys
##chroot "${INSTALLDIR}" mount -t devtmpfs none /dev
##chroot "${INSTALLDIR}" grub2-mkconfig -o /etc/grub2.cfg || RETCODE=1
##chroot "${INSTALLDIR}" grub2-mkconfig -o /etc/grub2-efi.cfg || RETCODE=1
##chroot "${INSTALLDIR}" umount /dev /sys /proc


#### '----------------------------------------------------------------------
info " Update config and grub"
#### '----------------------------------------------------------------------
"${SCRIPTSDIR}"/install-qubes-kvm-updates.sh


#### '----------------------------------------------------------------------
info ' Cleanup'
#### '----------------------------------------------------------------------
trap - ERR EXIT
trap
